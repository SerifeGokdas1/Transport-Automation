//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TransportProject10._11._22
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TransportEntities : DbContext
    {
        public TransportEntities()
            : base("name=TransportEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Shipment> Shipments { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
    
        public virtual int CAdd(string customerNameSurname, string address, string phone, string mail, string paymentMethod, Nullable<int> shipmentId)
        {
            var customerNameSurnameParameter = customerNameSurname != null ?
                new ObjectParameter("CustomerNameSurname", customerNameSurname) :
                new ObjectParameter("CustomerNameSurname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("ShipmentId", shipmentId) :
                new ObjectParameter("ShipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CAdd", customerNameSurnameParameter, addressParameter, phoneParameter, mailParameter, paymentMethodParameter, shipmentIdParameter);
        }
    
        public virtual int CDelete(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CDelete", customerIdParameter);
        }
    
        public virtual ObjectResult<CList_Result> CList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CList_Result>("CList");
        }
    
        public virtual int CUpdate(Nullable<int> customerId, string customerNameSurname, string address, string phone, string mail, string paymentMethod, Nullable<int> shipmentId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameSurnameParameter = customerNameSurname != null ?
                new ObjectParameter("CustomerNameSurname", customerNameSurname) :
                new ObjectParameter("CustomerNameSurname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("ShipmentId", shipmentId) :
                new ObjectParameter("ShipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CUpdate", customerIdParameter, customerNameSurnameParameter, addressParameter, phoneParameter, mailParameter, paymentMethodParameter, shipmentIdParameter);
        }
    
        public virtual int EAdd(string employeeName, string employeeSurname, string employeePassword, string employeeMail, Nullable<int> employeePhone)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeSurnameParameter = employeeSurname != null ?
                new ObjectParameter("EmployeeSurname", employeeSurname) :
                new ObjectParameter("EmployeeSurname", typeof(string));
    
            var employeePasswordParameter = employeePassword != null ?
                new ObjectParameter("EmployeePassword", employeePassword) :
                new ObjectParameter("EmployeePassword", typeof(string));
    
            var employeeMailParameter = employeeMail != null ?
                new ObjectParameter("EmployeeMail", employeeMail) :
                new ObjectParameter("EmployeeMail", typeof(string));
    
            var employeePhoneParameter = employeePhone.HasValue ?
                new ObjectParameter("EmployeePhone", employeePhone) :
                new ObjectParameter("EmployeePhone", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EAdd", employeeNameParameter, employeeSurnameParameter, employeePasswordParameter, employeeMailParameter, employeePhoneParameter);
        }
    
        public virtual int EDelete(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EDelete", employeeIdParameter);
        }
    
        public virtual ObjectResult<EList_Result> EList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EList_Result>("EList");
        }
    
        public virtual int EUpdate(Nullable<int> employeeId, string employeeName, string employeeSurname, string employeePassword, string employeeMail, Nullable<int> employeePhone)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeSurnameParameter = employeeSurname != null ?
                new ObjectParameter("EmployeeSurname", employeeSurname) :
                new ObjectParameter("EmployeeSurname", typeof(string));
    
            var employeePasswordParameter = employeePassword != null ?
                new ObjectParameter("EmployeePassword", employeePassword) :
                new ObjectParameter("EmployeePassword", typeof(string));
    
            var employeeMailParameter = employeeMail != null ?
                new ObjectParameter("EmployeeMail", employeeMail) :
                new ObjectParameter("EmployeeMail", typeof(string));
    
            var employeePhoneParameter = employeePhone.HasValue ?
                new ObjectParameter("EmployeePhone", employeePhone) :
                new ObjectParameter("EmployeePhone", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EUpdate", employeeIdParameter, employeeNameParameter, employeeSurnameParameter, employeePasswordParameter, employeeMailParameter, employeePhoneParameter);
        }
    
        public virtual int SAdd(string shipmentName, string shippingConsigneeAddress, string shippingSenderAddress, Nullable<int> distance, Nullable<int> distanceAmount, Nullable<int> employeeId, Nullable<int> vehicleId)
        {
            var shipmentNameParameter = shipmentName != null ?
                new ObjectParameter("ShipmentName", shipmentName) :
                new ObjectParameter("ShipmentName", typeof(string));
    
            var shippingConsigneeAddressParameter = shippingConsigneeAddress != null ?
                new ObjectParameter("ShippingConsigneeAddress", shippingConsigneeAddress) :
                new ObjectParameter("ShippingConsigneeAddress", typeof(string));
    
            var shippingSenderAddressParameter = shippingSenderAddress != null ?
                new ObjectParameter("ShippingSenderAddress", shippingSenderAddress) :
                new ObjectParameter("ShippingSenderAddress", typeof(string));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(int));
    
            var distanceAmountParameter = distanceAmount.HasValue ?
                new ObjectParameter("DistanceAmount", distanceAmount) :
                new ObjectParameter("DistanceAmount", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SAdd", shipmentNameParameter, shippingConsigneeAddressParameter, shippingSenderAddressParameter, distanceParameter, distanceAmountParameter, employeeIdParameter, vehicleIdParameter);
        }
    
        public virtual int SDelete(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("ShipmentId", shipmentId) :
                new ObjectParameter("ShipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SDelete", shipmentIdParameter);
        }
    
        public virtual int SList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SList");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SUpdate(Nullable<int> shipmentId, string shipmentName, string shippingConsigneeAddress, string shippingSenderAddress, Nullable<int> distance, Nullable<int> distanceAmount, Nullable<int> employeeId, Nullable<int> vehicleId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("ShipmentId", shipmentId) :
                new ObjectParameter("ShipmentId", typeof(int));
    
            var shipmentNameParameter = shipmentName != null ?
                new ObjectParameter("ShipmentName", shipmentName) :
                new ObjectParameter("ShipmentName", typeof(string));
    
            var shippingConsigneeAddressParameter = shippingConsigneeAddress != null ?
                new ObjectParameter("ShippingConsigneeAddress", shippingConsigneeAddress) :
                new ObjectParameter("ShippingConsigneeAddress", typeof(string));
    
            var shippingSenderAddressParameter = shippingSenderAddress != null ?
                new ObjectParameter("ShippingSenderAddress", shippingSenderAddress) :
                new ObjectParameter("ShippingSenderAddress", typeof(string));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(int));
    
            var distanceAmountParameter = distanceAmount.HasValue ?
                new ObjectParameter("DistanceAmount", distanceAmount) :
                new ObjectParameter("DistanceAmount", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUpdate", shipmentIdParameter, shipmentNameParameter, shippingConsigneeAddressParameter, shippingSenderAddressParameter, distanceParameter, distanceAmountParameter, employeeIdParameter, vehicleIdParameter);
        }
    
        public virtual int VAdd(string vehicleType, Nullable<int> vehicleCapacity, string vehicleDriver)
        {
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var vehicleCapacityParameter = vehicleCapacity.HasValue ?
                new ObjectParameter("VehicleCapacity", vehicleCapacity) :
                new ObjectParameter("VehicleCapacity", typeof(int));
    
            var vehicleDriverParameter = vehicleDriver != null ?
                new ObjectParameter("VehicleDriver", vehicleDriver) :
                new ObjectParameter("VehicleDriver", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VAdd", vehicleTypeParameter, vehicleCapacityParameter, vehicleDriverParameter);
        }
    
        public virtual int VDelete(Nullable<int> vehicleId)
        {
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VDelete", vehicleIdParameter);
        }
    
        public virtual ObjectResult<VList_Result> VList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VList_Result>("VList");
        }
    
        public virtual int VUpdate(Nullable<int> vehicleId, string vehicleType, Nullable<int> vehicleCapacity, string vehicleDriver)
        {
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var vehicleCapacityParameter = vehicleCapacity.HasValue ?
                new ObjectParameter("VehicleCapacity", vehicleCapacity) :
                new ObjectParameter("VehicleCapacity", typeof(int));
    
            var vehicleDriverParameter = vehicleDriver != null ?
                new ObjectParameter("VehicleDriver", vehicleDriver) :
                new ObjectParameter("VehicleDriver", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VUpdate", vehicleIdParameter, vehicleTypeParameter, vehicleCapacityParameter, vehicleDriverParameter);
        }
    }
}
